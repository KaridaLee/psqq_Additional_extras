# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: write  # 这给予了写入仓库内容的权限，包括创建releases

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: '7.6.2'
      
    - name: Build with Gradle
      run: gradle build
      
    # 改进的版本号提取方法，去掉了默认版本号
    - name: Extract mod version
      id: mod_version
      run: |
        # 首先输出build.gradle的内容以便调试
        echo "=== build.gradle content ==="
        cat build.gradle
        echo "=== end of build.gradle ==="
        
        # 使用gradle命令直接打印版本号
        echo "Fetching version using Gradle..."
        MOD_VERSION=$(./gradlew properties | grep "version:" | awk '{print $2}')
        
        # 如果gradle方式失败，尝试多种模式进行匹配
        if [ -z "$MOD_VERSION" ] || [ "$MOD_VERSION" = "null" ]; then
          echo "Trying regex extraction..."
          # 尝试各种可能的版本声明格式
          MOD_VERSION=$(grep -o "version\s*=\s*[\"'][^\"']*[\"']" build.gradle | sed -E "s/version\s*=\s*[\"']([^\"']*)[\"']/\1/" || \
                       grep -o "version\s*[\"'][^\"']*[\"']" build.gradle | sed -E "s/version\s*[\"']([^\"']*)[\"']/\1/" || \
                       grep -o "project.version\s*=\s*[\"'][^\"']*[\"']" build.gradle | sed -E "s/project.version\s*=\s*[\"']([^\"']*)[\"']/\1/")
        fi
        
        # 检查是否成功提取到版本号
        if [ -z "$MOD_VERSION" ]; then
          echo "Failed to extract version from build.gradle"
          exit 1
        fi
        
        echo "MOD_VERSION=$MOD_VERSION"
        echo "mod_version=$MOD_VERSION" >> $GITHUB_OUTPUT
      
    - name: Build with Gradle
      run: gradle build
      
    # 提取JAR文件并重命名（包含版本号）
    - name: Extract and rename JAR file
      id: extract-jar
      run: |
        mkdir -p jar-output
        JAR_FILE=$(find build/libs -name "*.jar" -not -name "*-sources.jar" -not -name "*-dev.jar" | head -n 1)
        if [ -z "$JAR_FILE" ]; then
          echo "No JAR file found!"
          exit 1
        fi
        echo "Found JAR file: $JAR_FILE"
        MOD_VERSION="${{ steps.mod_version.outputs.mod_version }}"
        echo "Using mod version: $MOD_VERSION"
        cp "$JAR_FILE" "jar-output/psqq_Additional_extras-$MOD_VERSION.jar"
        echo "jar_path=jar-output/psqq_Additional_extras-$MOD_VERSION.jar" >> $GITHUB_OUTPUT
        
    # 生成版本号
    - name: Generate version
      id: generate_version
      run: |
        TIMESTAMP=$(date +'%Y%m%d%H%M%S')
        SHORT_SHA=$(git rev-parse --short HEAD)
        echo "version=v${TIMESTAMP}-${SHORT_SHA}" >> $GITHUB_OUTPUT
      
    # 创建Release并上传JAR文件
    - name: Create Release and Upload JAR
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.generate_version.outputs.version }}
        name: "Build ${{ steps.generate_version.outputs.version }} (Mod v${{ steps.mod_version.outputs.mod_version }})"
        files: ${{ steps.extract-jar.outputs.jar_path }}
        draft: false
        prerelease: false
