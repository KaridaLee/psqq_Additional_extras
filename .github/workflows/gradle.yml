# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: '7.6.2'
      
    # 添加执行权限
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
      
    # 获取版本号
    - name: Extract mod version
      id: mod_version
      run: |
        echo "=== build.gradle content ==="
        cat build.gradle
        echo "=== end of build.gradle ==="
        
        # 尝试从各种格式获取版本号
        VERSION_FORMATS=(
          "version\s*=\s*[\"']([^\"']*)[\"']"
          "version\s*[\"']([^\"']*)[\"']"
          "project.version\s*=\s*[\"']([^\"']*)[\"']"
          "mod_version\s*=\s*[\"']([^\"']*)[\"']"
        )
        
        for FORMAT in "${VERSION_FORMATS[@]}"; do
          MOD_VERSION=$(grep -P "$FORMAT" build.gradle | head -1 | sed -E "s/$FORMAT/\1/")
          if [ ! -z "$MOD_VERSION" ]; then
            echo "Found version using pattern: $FORMAT"
            echo "Version: $MOD_VERSION"
            break
          fi
        done
        
        # 如果上面的方法失败，尝试使用Gradle
        if [ -z "$MOD_VERSION" ]; then
          echo "Trying Gradle properties extraction..."
          MOD_VERSION=$(./gradlew properties | grep "version:" | awk '{print $2}')
        fi
        
        # 确保我们有版本号
        if [ -z "$MOD_VERSION" ]; then
          echo "Failed to extract version from build.gradle!"
          exit 1
        fi
        
        echo "MOD_VERSION=$MOD_VERSION"
        echo "mod_version=$MOD_VERSION" >> $GITHUB_OUTPUT

    - name: Update mods.toml version
      run: |
        MOD_VERSION="${{ steps.mod_version.outputs.mod_version }}"
        echo "Updating mods.toml with version: $MOD_VERSION"
    
        # 找到mods.toml文件
        MODS_TOML=$(find src -name "mods.toml" | head -1)
        if [ -z "$MODS_TOML" ]; then
          echo "mods.toml file not found!"
          exit 1
        fi
    
        echo "Found mods.toml at: $MODS_TOML"
    
        # 显示更新前的内容
        echo "Before update:"
        cat "$MODS_TOML"
    
        # 更新版本行
        # 这个命令会查找包含version=的行并替换它
        sed -i -E "s/(version[[:space:]]*=[[:space:]]*\")[^\"]*(\")/$1$MOD_VERSION$2/" "$MODS_TOML"
    
        # 显示更新后的内容
        echo "After update:"
        cat "$MODS_TOML"
    
    # 构建项目
    - name: Build with Gradle
      run: ./gradlew build
      
    # 重命名文件
    - name: Extract and rename JAR file
      id: extract-jar
      run: |
        mkdir -p jar-output
        
        # 获取主JAR文件
        JAR_FILE=$(find build/libs -name "*.jar" -not -name "*-sources.jar" -not -name "*-dev.jar" | head -n 1)
        
        if [ -z "$JAR_FILE" ]; then
          echo "No JAR file found!"
          exit 1
        fi
        
        # 获取版本号
        MOD_VERSION="${{ steps.mod_version.outputs.mod_version }}"
        echo "Found JAR file: $JAR_FILE"
        echo "Using mod version: $MOD_VERSION"
        
        # 重命名但不修改内容
        OUTPUT_JAR="jar-output/psqq_Additional_extras-$MOD_VERSION.jar"
        cp "$JAR_FILE" "$OUTPUT_JAR"
        
        # 验证复制是否成功
        if [ ! -f "$OUTPUT_JAR" ]; then
          echo "Failed to copy JAR file!"
          exit 1
        fi
        
        echo "jar_path=$OUTPUT_JAR" >> $GITHUB_OUTPUT
        
    # 生成Release版本标签
    - name: Generate version
      id: generate_version
      run: |
        TIMESTAMP=$(date +'%Y%m%d%H%M%S')
        SHORT_SHA=$(git rev-parse --short HEAD)
        echo "version=v${TIMESTAMP}-${SHORT_SHA}" >> $GITHUB_OUTPUT
      
    # 创建Release
    - name: Create Release and Upload JAR
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.generate_version.outputs.version }}
        name: "Build ${{ steps.generate_version.outputs.version }} (Mod v${{ steps.mod_version.outputs.mod_version }})"
        files: ${{ steps.extract-jar.outputs.jar_path }}
        draft: false
        prerelease: false
