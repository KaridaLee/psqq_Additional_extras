# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: write  # 这给予了写入仓库内容的权限，包括创建releases

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: '7.6.2'
      
    - name: Build with Gradle
      run: gradle build
      
    # 提取JAR文件并重命名
    - name: Extract and rename JAR file
      id: extract-jar
      run: |
        mkdir -p jar-output
        JAR_FILE=$(find build/libs -name "*.jar" -not -name "*-sources.jar" -not -name "*-dev.jar" | head -n 1)
        if [ -z "$JAR_FILE" ]; then
          echo "No JAR file found!"
          exit 1
        fi
        echo "Found JAR file: $JAR_FILE"
        cp "$JAR_FILE" jar-output/psqq_Additional_extras.jar
        echo "jar_path=jar-output/psqq_Additional_extras.jar" >> $GITHUB_OUTPUT
        
    # 生成版本号 (基于时间戳和提交SHA)
    - name: Generate version
      id: generate_version
      run: |
        TIMESTAMP=$(date +'%Y%m%d%H%M%S')
        SHORT_SHA=$(git rev-parse --short HEAD)
        echo "version=v${TIMESTAMP}-${SHORT_SHA}" >> $GITHUB_OUTPUT
      
    # 创建Release并上传JAR文件
    - name: Create Release and Upload JAR
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.generate_version.outputs.version }}
        name: Build ${{ steps.generate_version.outputs.version }}
        files: ${{ steps.extract-jar.outputs.jar_path }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
